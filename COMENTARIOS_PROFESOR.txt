----- Evaluación Sumativa 1 -----

Mejoras que se deben implementar en base a los comentarios del profesor en la Evaluación Sumativa 1

    LISTO!!!!     1. En primer lugar, el proyecto debe tener las páginas HTML organizadas en carpetas 
                     según su funcionalidad o contexto, ya que actualmente todas se encuentran en la raíz,
                     lo que dificulta el mantenimiento, la escalabilidad del código y el posicionamiento SEO del sitio. 

    LISTO!!!       2. En segundo lugar, el menú de navegación podría permitir la navegación por categorías,
                     lo que enriquecería la experiencia del usuario y facilitaría el acceso a funcionalidades importantes, 
                     sin tener que verse en la obligación de volver al inicio.

    LISTO!!!!     3. Aunque la modificación de perfil está implementada, debe estar disponible desde una 
                     opción accesible para revisión, incluso si aún no se cuenta con autenticación implementada en backend.

    LISTO!!!!     4. En el formulario de inicio de sesión, es necesario validar la integridad de la contraseña 
                     de forma similar a como se hace en el registro, y eliminar mensaje “usuario o contraseña incorrectos”, 
                     en alert, que se presenta una vez validado el formulario y el mensaje de usuario autenticado, 
                     Esto sucede por que está ejecutando código en javascript que, otra vez, valida a formulario_ingreso, 
                     lo que se puede encontrar en /* Creando usuarios de prueba */.

    LISTO!!!!     5. En cuanto al formulario de modificación de perfil, la validación entre contraseña y confirmación
                     no está funcionando correctamente, posiblemente por un error en el contexto del campo evaluado 
                     (dice contrasennaImput, pudiendo ser modifContrasenna), y además la URL de de inicio en el menú dirige a index2.html.

    LISTO!!!     6.Finalmente, es fundamental que implementen las páginas internas requeridas por su temática, 
                  como mantenedores de productos, clientes, gestión de inventario e historial de compras, entre otras, 
                  a que son parte esencial del alcance definido.


Les sugiero enfocarse en la organización del proyecto, la coherencia en las rutas y la profundización en las validaciones de 
todos los formularios. Les será muy útil revisar sus scripts de JavaScript para asegurar que las variables y elementos del DOM 
estén correctamente referenciados. También pueden analizar cómo estructurar mejor su arquitectura de carpetas para reflejar una 
separación clara de responsabilidades, funcionalidades y contenidos. Continúen trabajando en equipo con la misma dedicación, 
ya que van por buen camino.






----- Evaluación Sumativa 2 -----

Mejoras que se deben implementar en base a los comentarios del profesor en la Evaluación Sumativa 2


    Marjorie, Tomás y Felipe,
    Espero que se encuentren bien. Quiero comenzar esta retroalimentación reconociendo el esfuerzo colectivo que han puesto en el 
    desarrollo de su aplicación web durante esta actividad sumativa. Es evidente que han avanzado con compromiso y responsabilidad, 
    lo cual se refleja en varios aspectos técnicos bien ejecutados. El trabajo colaborativo en equipo no siempre es sencillo, especialmente 
    cuando se trata de coordinar tareas técnicas complejas como las que implica un proyecto integral de desarrollo web, pero ustedes 
    han demostrado una colaboración efectiva en Git, con un repositorio público que muestra una secuencia clara de commits incrementales 
    y una distribución equilibrada de tareas entre los integrantes. Este tipo de práctica no solo fortalece el proceso de desarrollo, 
    sino que también prepara para entornos profesionales reales donde la trazabilidad del código y la transparencia del trabajo son fundamentales.


    En cuanto al frontend intuitivo, deben sentirse orgullosos del resultado visual y estructural de su interfaz. La organización de 
    templates, la navegación condicional basada en autenticación y la correcta implementación de archivos estáticos demuestran un 
    entendimiento claro de cómo debe funcionar la capa de presentación en un framework como Django. Además, el uso de validaciones del 
    lado del cliente mediante JavaScript mejora significativamente la experiencia de usuario, algo que muchas aplicaciones subestiman. 
    También valoro positivamente que hayan definido sus modelos con relaciones claras de clave foránea entre Categoria, Producto e 
    Inventario, y que hayan aplicado correctamente las migraciones. Esto indica que comprenden la importancia de una base sólida en la capa 
    de datos, aunque aún queda por conectarla completamente con el resto del sistema.


    Ahora bien, en este punto del proceso, el objetivo principal era lograr una integración completa entre la capa de presentación, 
    la capa de negocios y la capa de datos, asegurando que cada acción del usuario se traduzca en operaciones reales sobre la base de datos. 
    Aquí es donde aparecen algunas oportunidades importantes de mejora. Actualmente, muchos de sus templates (como los de categorías, 
    compras o inventario) son estáticos, lo que significa que no están conectados a los modelos ni permiten realizar operaciones de 
    creación, actualización o eliminación. Esto limita fuertemente la funcionalidad real de la aplicación. Les sugiero enfocarse en 
    desarrollar vistas basadas en clases para gestionar productos e inventario, aprovechando el potencial de Django para crear CRUDs 
    completos que interactúen directamente con la base de datos.


    Otro aspecto clave es la diferenciación de roles de usuario. Si bien tienen una autenticación funcional utilizando el sistema de 
    autenticación de Django, aún no se ha implementado una lógica que permita distinguir entre tipos de usuarios, como administradores 
    y clientes. Para avanzar, consideren crear un modelo UserProfile con un campo de elección (choices) que asigne roles, y complementarlo 
    con un middleware personalizado que controle el acceso a ciertas URLs según ese rol. Esto no solo cumple con uno de los requerimientos 
    centrales, sino que también profundiza en la seguridad de la aplicación.


    Finalmente y con respecto al registro de usuarios, han hecho un buen trabajo extendiendo UserCreationForm para incluir campos 
    adicionales, lo cual muestra habilidad técnica. Sin embargo, la modificación de perfil y la recuperación de contraseña siguen 
    siendo plantillas estáticas sin funcionalidad backend. Les recomiendo integrar Django’s PasswordResetView y crear una vista para 
    edición de perfil que permita actualizar datos del usuario autenticado, conectando así estos procesos con la lógica del sistema.

    
    Como próximo paso, les propongo centrarse en hacer que su aplicación sea verdaderamente dinámica: que cada formulario envíe datos 
    a la base, que cada lista se genere desde la base de datos y que cada acción de usuario tenga un efecto real en el sistema. 
    Pueden comenzar por un módulo pequeño, como el CRUD de categorías, y luego escalar a productos e inventario. Usen las herramientas 
    que Django ofrece, como generic views, forms personalizados y decorators como @login_required o @user_passes_test. Con estos ajustes, 
    estarán mucho más cerca de entregar una solución completa, segura y funcional. Sigan así, tienen una base muy sólida para seguir creciendo.

¡Muy buen trabajo!









----- Evaluación Sumativa 3 -----

Mejoras que se deben implementar en base a los comentarios del profesor en la Evaluación Sumativa 3



-- Lo bueno --

    Hola Marjorie, Tomás y Felipe. Antes que nada, quiero reconocer el esfuerzo coordinado y técnico que han demostrado en esta entrega, 
    ya que su trabajo refleja una comprensión sólida de los principios modernos del desarrollo web con Django, así como una madurez notable 
    en la organización del código y en la colaboración en equipo. El objetivo de esta actividad era que pudieran desarrollar APIs REST 
    propias, consumir servicios externos, proteger sus endpoints con autenticación basada en tokens, y mantener una arquitectura limpia y 
    colaborativa, y en ese sentido han alcanzado un desempeño sobresaliente que los sitúa muy cerca del estándar profesional esperado en 
    entornos reales de desarrollo.



    En cuanto a su desempeño actual, han logrado implementar de manera íntegra y funcional dos APIs REST completas con operaciones CRUD 
    orientadas a la gestión de una tienda, lo cual no solo cumple con lo solicitado, sino que además demuestra una buena abstracción de 
    los requerimientos de negocio en recursos API bien estructurados. Asimismo, la integración de autenticación basada en tokens en ambas 
    APIs propias refleja una comprensión clara de los mecanismos de seguridad necesarios para exponer servicios de forma segura, 
    evitando accesos no autorizados y protegiendo la integridad de los datos. En el ámbito del consumo externo, han incorporado dos 
    servicios web públicos de forma correcta, mostrando la información en su interfaz sin necesidad de recargar la página, lo cual 
    evidencia un manejo adecuado de peticiones asíncronas y una buena integración frontend-backend. Además, su uso de repositorios en Git 
    con participación equitativa entre los tres integrantes es un aspecto fundamental que refuerza buenas prácticas de ingeniería de 
    software en entornos colaborativos. Finalmente, la separación clara entre frontend, backend y APIs en aplicaciones Django distintas 
    demuestra una arquitectura limpia y mantenible, facilitando futuras ampliaciones o modificaciones del sistema.



-- A mejorar --

    Sin embargo, hay aspectos en los que pueden profundizar para elevar aún más la calidad de su solución. En primer lugar, aunque el 
    consumo de servicios externos funciona correctamente, sería recomendable implementar un manejo robusto de errores, incluyendo 
    estrategias como timeouts controlados, reintentos inteligentes y mensajes de error amigables para el usuario en caso de fallos en la 
    red o en los servicios consumidos. Esto no solo mejora la experiencia de usuario, sino que también aumenta la resiliencia de su 
    aplicación frente a imprevistos comunes en entornos reales. En segundo lugar, si bien sus APIs están bien estructuradas, las 
    validaciones en los serializadores podrían ser más estrictas, especialmente en cuanto a tipos de datos, rangos aceptables o formatos 
    esperados, lo que ayudaría a prevenir inconsistencias o ataques por inyección de datos maliciosos. Una recomendación concreta en esta 
    línea es considerar el uso de bibliotecas como Pydantic o esquemas de validación más avanzados dentro de Django REST Framework, 
    que permiten definir contratos de datos más rigurosos y expresivos.



    Continúen aplicando esta mentalidad de calidad en cada capa de su sistema, y no duden en explorar herramientas y patrones que les 
    permitan anticiparse a posibles fallos antes de que ocurran. Felicidades nuevamente por el excelente trabajo entregado.